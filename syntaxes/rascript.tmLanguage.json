{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "RAScript",
    "patterns": [
        {
            "include": "#statements"
        }
    ],
    "repository": {
        "statements": {
            "patterns": [
                {
                    "include": "#controls"
                },
                {
                    "include": "#booleans"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#numbers"
                },
                {
                    "include": "#class-definitions"
                },
                {
                    "include": "#function-definitions"
                },
                {
                    "include": "#function-names"
                },
                {
                    "include": "#header"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#variable-language-this"
                },
                {
                    "include": "#variable-assignment"
                },
                {
                    "include": "#variable-other"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "begin": "/\\*",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.block.rascript"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block.rascript"
                },
                {
                    "begin": "//",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.single.rascript"
                        }
                    },
                    "end": "$",
                    "name": "comment.line.double-slash.rascript"
                }
            ]
        },
        "header": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.rascript",
                    "match": "^//\\s*(#ID)\\s*=\\s*(\\d+)$",
                    "captures": {
                        "1": {
                            "name": "keyword.other.id.rascript"
                        },
                        "2": {
                            "name": "constant.numeric.id.rascript"
                        }
                    }
                },
                {
                    "name": "comment.line.double-slash.rascript",
                    "match": "^//\\s*(#MinimumVersion)\\s*=\\s*(\\d+(\\.\\d)?)$",
                    "captures": {
                        "1": {
                            "name": "keyword.other.version.rascript"
                        },
                        "2": {
                            "name": "constant.numeric.version.rascript"
                        }
                    }
                }
            ]
        },
        "class-definitions": {
            "patterns": [
                {
                    "match": "(\\bclass\\b)[\\t ]*(([a-zA-Z_][\\w]*)|(.+))",
                    "captures": {
                        "1": {
                            "name": "keyword.class.rascript"
                        },
                        "3": {
                            "name": "entity.name.class.rascript"
                        },
                        "4": {
                            "name": "invalid.illegal.identifier.rascript"
                        }
                    }
                }
            ]
        },
        "function-definitions": {
            "patterns": [
                {
                    "match": "(\\bfunction\\b)[\\t ]*(([a-zA-Z_][\\w]*)|(.+))[\\t ]*\\(([^\\(\\)]*)\\)",
                    "captures": {
                        "1": {
                            "name": "keyword.function.rascript"
                        },
                        "3": {
                            "name": "entity.name.function.rascript"
                        },
                        "4": {
                            "name": "invalid.illegal.identifier.rascript"
                        },
                        "5": {
                            "patterns": [
                                {
                                    "match": "(?:[\\w]+\\s+[\\w]+)",
                                    "name": "invalid.illegal.identifier.rascript"
                                },
                                {
                                    "match": "(?:[^\\s\\,]*[\\%\\!\\@\\#\\$\\%\\^\\&\\*\\-\\=\\+\\[\\]\\{\\}\\;\\:\\'\"\\.\\<\\>\\/\\?]+[^\\s\\,]*)",
                                    "name": "invalid.illegal.identifier.rascript"
                                },
                                {
                                    "match": "(?:[a-zA-Z_][\\w]*)",
                                    "name": "variable.parameter.rascript"
                                },
                                {
                                    "match": "(?:\\w+)",
                                    "name": "invalid.illegal.identifier.rascript"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "controls": {
            "patterns": [
                {
                    "name": "keyword.control.rascript",
                    "match": "\\b(if|else|for|in|return)\\b"
                }
            ]
        },
        "function-names": {
            "patterns": [
                {
                    "match": "(\\w+)\\s*\\(",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "match": "\\w+[\\s]+\\w+",
                                    "name": "invalid.illegal.identifier.rascript"
                                },
                                {
                                    "match": "(?:.*[\\%\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\]\\{\\}\\;\\:\\'\"\\,\\.\\<\\>\\/\\?]+.*)",
                                    "name": "invalid.illegal.identifier.rascript"
                                },
                                {
                                    "match": "[0-9][a-zA-Z0-9]*",
                                    "name": "invalid.illegal.identifier.rascript"
                                },
                                {
                                   "match": "\\w+",
                                   "name": "entity.name.function.rascript"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "variable-language-this": {
            "patterns": [
                {
                    "name": "variable.language.this.rascript",
                    "match": "\\b(this)\\b"
                }
            ]
        },
        "variable-assignment": {
            "patterns": [
                {
                    "comment": "left hand side of variable assignment",
                    "match": "([a-zA-Z_][\\w]*)[\\t ]*=",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "match": "(?:[a-zA-Z_][\\w]*)",
                                    "name": "variable.other.assignment.rascript"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "variable-other": {
            "patterns": [
                {
                    "comment": "different variables around the file being used, not assignment",
                    "match": "([a-zA-Z_][\\w]*)",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "match": "(?:[a-zA-Z_][\\w]*)",
                                    "name": "variable.other.rascript"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.decimal.rascript",
                    "match": "\\b[0-9]+\\b"
                },
                {
                    "name": "constant.numeric.hexadecimal.rascript",
                    "match": "(?i)\\$\\b\\h+\\b|\\b0x\\h+\\b"
                }
            ]
        },
        "booleans": {
            "patterns": [{
                "name": "constant.language.boolean.rascript",
                "match": "\\b(true|false)\\b"
            }]
        },
        "strings": {
            "patterns": [{
                "name": "string.quoted.double.rascript",
                "match": "(?:\".*?\")"
            }]
        }
    },
    "scopeName": "source.rascript"
}